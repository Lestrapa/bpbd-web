/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type News = {
  _id: string;
  _type: "news";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  content?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | News | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: NEWS_QUERY
// Query: *[_type == "news" && defined(slug.current)] | order(_createdAt desc) {    _id, title, slug, "image": image.asset->url, content, _createdAt  }
export type NEWS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  image: string | null;
  content: string | null;
  _createdAt: string;
}>;
// Variable: NEWS_DETAIL_QUERY
// Query: *[_type == "news" && slug.current == $slug][0]{  title, body, mainImage, publishedAt, author->{name}}
export type NEWS_DETAIL_QUERYResult = {
  title: string | null;
  body: null;
  mainImage: null;
  publishedAt: null;
  author: null;
} | null;
// Variable: DISASTER_GUIDE_QUERY
// Query: *[_type == "disasterGuide" && defined(slug.current)]{  _id, title, slug, category, icon, body}
export type DISASTER_GUIDE_QUERYResult = Array<never>;
// Variable: DISASTER_GUIDE_DETAIL_QUERY
// Query: *[_type == "disasterGuide" && slug.current == $slug][0]{  title, category, icon, body}
export type DISASTER_GUIDE_DETAIL_QUERYResult = null;
// Variable: EMERGENCY_SERVICES_QUERY
// Query: *[_type == "emergencyService"]{  _id, name, category, contact, location}
export type EMERGENCY_SERVICES_QUERYResult = Array<never>;
// Variable: DISASTER_REPORTS_QUERY
// Query: *[_type == "disasterReport"] | order(reportedAt desc)[0...12]{  _id, disasterType, location, reportedAt, status, images}
export type DISASTER_REPORTS_QUERYResult = Array<never>;
// Variable: DISASTER_REPORT_DETAIL_QUERY
// Query: *[_type == "disasterReport" && _id == $id][0]{  disasterType, location, reportedAt, status, description, images}
export type DISASTER_REPORT_DETAIL_QUERYResult = null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"news\" && defined(slug.current)] | order(_createdAt desc) {\n    _id, title, slug, \"image\": image.asset->url, content, _createdAt\n  }": NEWS_QUERYResult;
    "*[_type == \"news\" && slug.current == $slug][0]{\n  title, body, mainImage, publishedAt, author->{name}\n}": NEWS_DETAIL_QUERYResult;
    "*[_type == \"disasterGuide\" && defined(slug.current)]{\n  _id, title, slug, category, icon, body\n}": DISASTER_GUIDE_QUERYResult;
    "*[_type == \"disasterGuide\" && slug.current == $slug][0]{\n  title, category, icon, body\n}": DISASTER_GUIDE_DETAIL_QUERYResult;
    "*[_type == \"emergencyService\"]{\n  _id, name, category, contact, location\n}": EMERGENCY_SERVICES_QUERYResult;
    "*[_type == \"disasterReport\"] | order(reportedAt desc)[0...12]{\n  _id, disasterType, location, reportedAt, status, images\n}": DISASTER_REPORTS_QUERYResult;
    "*[_type == \"disasterReport\" && _id == $id][0]{\n  disasterType, location, reportedAt, status, description, images\n}": DISASTER_REPORT_DETAIL_QUERYResult;
  }
}
